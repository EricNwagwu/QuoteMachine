{"version":3,"sources":["Components/lyric.jsx","Components/page.jsx","serviceWorker.js","index.js"],"names":["Lyric","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","lyrics","lyric","artist","currentLyric","changeLyric","bind","assertThisInitialized","ranLyric","Math","floor","random","length","setState","react_default","a","createElement","id","style","position","top","width","margin","background","borderRadius","className","fontSize","fontFamily","color","colorNote","left","onClick","colorChange","onMouseUp","href","target","float","Component","Page","styles","concat","height","handleData","rgb","i","push","Boolean","window","location","hostname","match","ReactDOM","render","page","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.105f77cc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Lyric extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      lyrics: [\r\n        {\r\n          lyric: \"She's a rockstar everybody said don't date her\",\r\n          artist: \"-Lil uzi vert\"\r\n        },\r\n        { lyric: \"Play with you like nintendo\", artist: \"-Young Nudy\" },\r\n        { lyric: \"When I die put my money in the grave\", artist: \"-Drake\" },\r\n        { lyric: \"Shoot your shot like ammunition\", artist: \"-Pierre Bourne\" },\r\n        { lyric: \"Money sitting tall Yao Ming\", artist: \"-Playboi Carti\" }\r\n      ],\r\n      currentLyric: {}\r\n    };\r\n    this.changeLyric = this.changeLyric.bind(this);\r\n  }\r\n  componentWillMount() {\r\n    this.changeLyric();\r\n  }\r\n\r\n  changeLyric() {\r\n    let ranLyric = Math.floor(Math.random() * this.state.lyrics.length);\r\n    while (this.state.lyrics[ranLyric] === this.state.currentLyric) {\r\n      ranLyric = Math.floor(Math.random() * this.state.lyrics.length);\r\n    }\r\n    this.setState({\r\n      currentLyric: this.state.lyrics[ranLyric]\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        id=\"quote-box\"\r\n        style={{\r\n          position: \"relative\",\r\n          top: \"40vh\",\r\n          width: \"30vw\",\r\n          margin: \"auto\",\r\n          background: \"white\",\r\n          borderRadius: \"10px\"\r\n        }}\r\n        className=\"container-fluid\"\r\n      >\r\n        <p\r\n          id=\"text\"\r\n          className=\"text-center\"\r\n          style={{\r\n            fontSize: \"2vw\",\r\n            fontFamily: \"Patua One\"\r\n          }}\r\n        >\r\n          <i className=\"fa fa-music\" style={{ color: this.props.colorNote }} />\r\n          {this.state.currentLyric.lyric}\r\n        </p>\r\n        <p\r\n          id=\"author\"\r\n          className=\"text-center\"\r\n          style={{\r\n            fontSize: \"1.5vw\",\r\n            position: \"relative\",\r\n            left: \"6vw\",\r\n            fontFamily: \"Patua One Bold\"\r\n          }}\r\n        >\r\n          {this.state.currentLyric.artist}\r\n        </p>\r\n        <button\r\n          id=\"new-quote\"\r\n          className=\"btn btn-primary\"\r\n          onClick={this.props.colorChange}\r\n          onMouseUp={this.changeLyric}\r\n        >\r\n          New Lyric\r\n        </button>\r\n        <a\r\n          id=\"tweet-quote\"\r\n          href=\"twitter.com/intent/tweet\"\r\n          target=\"_blank\"\r\n          style={{ float: \"right\" }}\r\n        >\r\n          <i className=\"fa fa-twitter\" />\r\n          Post Lyric on Twitter\r\n        </a>\r\n\r\n        <p style={{ fontFamily: \"Bangers\" }}>By Ciren</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Lyric;\r\n","import React, { Component } from \"react\";\r\nimport Lyric from \"./lyric\";\r\n\r\nclass Page extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      styles: {\r\n        background: `rgba(${[\r\n          Math.floor(Math.random() * 256),\r\n          Math.floor(Math.random() * 256),\r\n          Math.floor(Math.random() * 256)\r\n        ]})`,\r\n        width: \"100vw\",\r\n        height: \"100vh\"\r\n      }\r\n    };\r\n    this.handleData = this.handleData.bind(this);\r\n  }\r\n\r\n  handleData() {\r\n    let rgb = [];\r\n    for (let i = 0; i < 3; i++) {\r\n      rgb.push(Math.floor(Math.random() * 256));\r\n    }\r\n    this.setState({\r\n      styles: {\r\n        background: `rgb(${rgb})`,\r\n        width: \"100vw\",\r\n        height: \"100vh\"\r\n      }\r\n    });\r\n  }\r\n  render() {\r\n    return (\r\n      <div style={this.state.styles}>\r\n        <Lyric\r\n          colorChange={this.handleData}\r\n          colorNote={this.state.styles.background}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Page;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Page from \"./Components/page\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<Page />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}